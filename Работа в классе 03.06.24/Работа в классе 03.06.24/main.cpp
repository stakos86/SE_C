//
//  main.cpp
//  Работа в классе 03.06.24
//
//  Created by Станислав Егоров on 03.06.2024.
//

#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>

// Определение интерфейса Работник
class Работник {
public:
    virtual void Работать() = 0;
};

// Реализация классов Бухгалтер, Менеджер, Кассир
class Бухгалтер : public Работник {
public:
    void Работать() override {
        std::cout << "Бухгалтер работает." << std::endl;
    }
};

class Менеджер : public Работник {
public:
    void Работать() override {
        std::cout << "Менеджер работает." << std::endl;
    }
};

class Кассир : public Работник {
public:
    void Работать() override {
        std::cout << "Кассир работает." << std::endl;
    }
};

// Класс СписокРаботников
class СписокРаботников {
private:
    std::vector<Работник*> работники;

public:
    void Добавить(Работник* работник) {
        работники.push_back(работник);
    }

    void РаботатьВсем() {
        for (auto работник : работники) {
            работник->Работать();
        }
    }
};

// ЛенивыйПрограммист
class ЛенивыйПрограммист : public Работник {
private:
    bool работа;

public:
    ЛенивыйПрограммист() : работа(false) {}

    void ТипаРабота() {
        int randomNum = rand() % 2; // Генерирует случайное число 0 или 1
        работа = randomNum % 2 == 0; // Если число четное, устанавливаем работу в true
    }

    void Работать() override {
        ТипаРабота();
        if (работа) {
            std::cout << "Ленивый программист работает." << std::endl;
        }
        else {
            std::cout << "Ленивый программист не работает." << std::endl;
        }
    }
};

int main() {
    srand(time(0)); // Инициализация генератора случайных чисел

    // Создание объектов классов
    Бухгалтер бухгалтер;
    Менеджер менеджер;
    Кассир кассир;
    ЛенивыйПрограммист ленивыйПрограммист;

    // Создание списка работников
    СписокРаботников списокРаботников;

    // Добавление работников в список
    списокРаботников.Добавить(&бухгалтер);
    списокРаботников.Добавить(&менеджер);
    списокРаботников.Добавить(&кассир);
    списокРаботников.Добавить(&ленивыйПрограммист);

    // Вызов метода Работать всем работникам
    списокРаботников.РаботатьВсем();

    // Тип работы ленивого программиста
    ленивыйПрограммист.ТипаРабота();

    return 0;
}
